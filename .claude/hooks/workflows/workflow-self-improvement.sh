#!/bin/bash
# workflows/workflow-self-improvement.sh - Claude as system architect and evolution engine

set -e
source "$CLAUDE_PROJECT_DIR/.env"
source "$HOOKS_DIR/lib/logging.sh"
source "$HOOKS_DIR/lib/state.sh"
source "$HOOKS_DIR/lib/data-access.sh"
source "$HOOKS_DIR/lib/claude.sh"

export HOOK_NAME="workflow/self-improvement"
ATOMIC_HOOKS_DIR="$HOOKS_DIR/atomic"

log_warning "evolution_start" "running" "HYPERBOLIC-TRAINING CYCLE"

# Initialize evolution state
evolution_id="evolution_$(date +%s)"
state_set "evolution_id" "$evolution_id"
state_set "evolution_start_time" "$(date +%s)"

# 1. GATHER COMPREHENSIVE SYSTEM DATA
log_info "data_collection" "running" "Collecting system performance data"

performance_data=""
if command -v curl >/dev/null 2>&1 && [[ -n "$PROMETHEUS_URL" ]]; then

    hook_metrics=$(curl -s "$PROMETHEUS_URL/api/v1/query?query=hook_duration_seconds" 2>/dev/null | jq -r '.data.result[]? | "\(.metric.hook_name): \(.value[1])s"' | head -20 || echo "")
    

    error_metrics=$(curl -s "$PROMETHEUS_URL/api/v1/query?query=rate(hook_errors_total[1h])" 2>/dev/null | jq -r '.data.result[]? | "\(.metric.hook_name): \(.value[1]) errors/hour"' | head -10 || echo "")
    
    performance_data="Hook execution times: $hook_metrics | Error rates: $error_metrics"
else

    recent_logs=$(tail -100 "$CLAUDE_PROJECT_DIR/.claude/logs/system.jsonl" | jq -r 'select(.level == "ERROR") | "\(.hook): \(.message)"' | sort | uniq -c | head -10 || echo "")
    performance_data="Recent errors from logs: $recent_logs"
fi


error_patterns=""
if command -v curl >/dev/null 2>&1 && [[ -n "$ELASTIC_URL" ]]; then
    error_patterns=$(curl -s "$ELASTIC_URL/activity_log/_search" -H "Content-Type: application/json" -d '{"query": {"bool": {"filter": [{"term": {"level": "ERROR"}}, {"range": {"timestamp": {"gte": "now-24h"}}}]}}, "size": 20}' 2>/dev/null | jq -r '.hits.hits[]?._source | "\(.hook_name): \(.message)"' | sort | uniq -c | head -10 || echo "")
else
    # Fallback: analyze log files directly
    error_patterns=$(grep -h "ERROR" "$CLAUDE_PROJECT_DIR/.claude/logs"/*.log 2>/dev/null | cut -d'|' -f3-5 | sort | uniq -c | head -10 || echo "No recent errors found")
fi


cost_trends=""
cost_data=$(_psql_query "
    SELECT 
        agent_id,
        DATE(recorded_at) as date,
        SUM(total_cost_usd) as daily_cost,
        COUNT(*) as task_count,
        AVG(total_cost_usd) as avg_task_cost
    FROM cost_records 
    WHERE recorded_at > NOW() - INTERVAL '7 days'
    GROUP BY agent_id, DATE(recorded_at)
    ORDER BY date DESC, daily_cost DESC
    LIMIT 20
")

if [[ -n "$cost_data" ]]; then
    cost_trends="Weekly cost analysis: $cost_data"
else
    cost_trends="No cost data available for analysis"
fi


agent_effectiveness=""
effectiveness_data=$(_psql_query "
    SELECT 
        agent_id,
        AVG(effectiveness_score) as avg_effectiveness,
        COUNT(*) as task_count,
        MIN(effectiveness_score) as min_score,
        MAX(effectiveness_score) as max_score
    FROM context_injections 
    WHERE effectiveness_score IS NOT NULL 
    AND injected_at > NOW() - INTERVAL '7 days'
    GROUP BY agent_id
    ORDER BY avg_effectiveness DESC
    LIMIT 10
")

if [[ -n "$effectiveness_data" ]]; then
    agent_effectiveness="Agent effectiveness analysis: $effectiveness_data"
else
    agent_effectiveness="No agent effectiveness data available"
fi

log_info "data_collected" "success" "System data collected for Claude analysis"

log_info "claude_analysis" "running" "Claude analyzing system architecture and performance"

system_analysis=$(claude_system_evolution "$performance_data" "$error_patterns" "$cost_trends" "$agent_effectiveness")

if [[ $? -ne 0 ]] || [[ -z "$system_analysis" ]]; then
    log_error "claude_analysis_failed" "critical" "Claude system analysis failed - evolution cycle aborted"
    exit 1
fi

log_info "claude_analysis" "completed" "Claude completed system analysis ($(echo "$system_analysis" | wc -c) chars)"


analysis_file="$CLAUDE_PROJECT_DIR/.claude/context/evolution-analysis-$evolution_id.md"
cat > "$analysis_file" << EOF
# System Evolution Analysis $evolution_id
**Generated**: $(date -Iseconds)
**Analyst**: Claude (Self-Analysis)

## Claude's System Analysis

$system_analysis

---
*This analysis was generated by Claude analyzing the system's own performance data.*
EOF

log_info "suggestion_extraction" "running" "Extracting actionable improvement suggestions"

suggestions=$(echo "$system_analysis" | claude_analyze --model 'opus' "
Based on this system analysis, extract 3 specific, implementable improvement suggestions.

For each suggestion, provide:
1. **Title**: Brief descriptive name
2. **Priority**: high/medium/low
3. **Type**: hook_optimization/config_change/architecture_improvement/performance_tuning
4. **Description**: What exactly needs to be done
5. **Expected_Benefit**: Quantifiable improvement expected
6. **Implementation**: Specific steps or code changes needed
7. **Risk_Level**: low/medium/high

Respond with a markdown list of exactly 3 suggestions, each clearly numbered and formatted.
")

if [[ -n "$suggestions" ]]; then
    suggestions_file="$CLAUDE_PROJECT_DIR/.claude/context/improvement-suggestions-$evolution_id.md"
    cat > "$suggestions_file" << EOF
# Improvement Suggestions $evolution_id
**Generated**: $(date -Iseconds)
**Source**: Claude System Evolution Analysis

$suggestions

## Next Steps
1. Review each suggestion for feasibility and safety
2. Approve implementation via system-cli.sh
3. Monitor impact after implementation
4. Document results for future evolution cycles

---
*These suggestions were generated by Claude's self-analysis of the system.*
EOF
    
    log_info "suggestions_generated" "pending_review" "Generated improvement suggestions: $suggestions_file"
else
    log_warning "no_suggestions" "completed" "Claude did not generate specific improvement suggestions"
fi


log_info "evolution_storage" "running" "Storing evolution data for tracking"

_psql_query "INSERT INTO chronicle_events (event_type, event_title, event_description, metadata, significance_level) VALUES ('system_evolution', 'Self-Improvement Cycle $evolution_id', 'Claude analyzed system performance and generated improvement suggestions', '{\"evolution_id\": \"$evolution_id\", \"analysis_file\": \"$analysis_file\", \"suggestions_file\": \"$suggestions_file\"}', 9)"

suggestion_count=0
if [[ -n "$suggestions" ]]; then
    # Try to parse suggestions and store in database
    echo "$suggestions" | grep -E "^[0-9]+\." | while IFS= read -r suggestion_line; do
        suggestion_count=$((suggestion_count + 1))
        suggestion_title=$(echo "$suggestion_line" | sed 's/^[0-9]*\. *//' | head -c 100)
        
        _psql_query "INSERT INTO improvement_suggestions (title, suggestion_type, justification, implementation_details, status) VALUES ('Evolution $evolution_id: $suggestion_title', 'claude_evolution', 'Generated by Claude self-analysis', '$suggestions', 'pending')"
    done
fi

log_info "roadmap_creation" "running" "Creating evolution roadmap"

roadmap=$(echo "$system_analysis" | claude_analyze "
Based on this system analysis, create a 30-day evolution roadmap for the system.

Include:
- **Week 1**: Immediate optimizations and fixes
- **Week 2**: Performance improvements and enhancements  
- **Week 3**: Architecture refinements
- **Week 4**: Advanced features and capabilities

For each week, list specific actionable items with expected outcomes.
Focus on compound improvements that build system intelligence over time.
")

if [[ -n "$roadmap" ]]; then
    roadmap_file="$CLAUDE_PROJECT_DIR/.claude/context/evolution-roadmap.md"
    cat > "$roadmap_file" << EOF
# Evolution Roadmap
**Generated**: $(date -Iseconds) by Evolution Cycle $evolution_id
**Status**: Pending Human Review

$roadmap

## Evolution Tracking
- **Current Evolution ID**: $evolution_id
- **Analysis File**: $analysis_file
- **Suggestions File**: $suggestions_file
- **Next Review**: $(date -d "+7 days" -Iseconds)

---
*This roadmap was generated by Claude's self-analysis and strategic planning for the LevAIthan system.*
EOF
    
    log_info "roadmap_created" "success" "Evolution roadmap created: $roadmap_file"
else
    log_warning "roadmap_failed" "degraded" "Failed to generate evolution roadmap"
fi

log_info "metrics_update" "running" "Updating system learning metrics"

end_time=$(date +%s)
start_time=$(state_get "evolution_start_time")
duration=$((end_time - start_time))

evolution_metrics=$(cat << EOF
{
  "evolution_id": "$evolution_id",
  "duration_seconds": $duration,
  "analysis_length": ${#system_analysis},
  "suggestions_generated": $(echo "$suggestions" | grep -c "^[0-9]\." || echo 0),
  "data_sources_analyzed": 4,
  "timestamp": "$(date -Iseconds)"
}
EOF
)

echo "$evolution_metrics" >> "$CLAUDE_PROJECT_DIR/.claude/logs/evolution-cycles.jsonl"

log_warning "human_notification" "pending_review" "Evolution analysis complete - human review required"

# Create notification summary
notification_file="$CLAUDE_PROJECT_DIR/.claude/logs/evolution-notification-$evolution_id.txt"
cat > "$notification_file" << EOF
SYSTEM EVOLUTION COMPLETE

Evolution ID: $evolution_id
Completed: $(date)
Duration: ${duration} seconds

ANALYSIS RESULTS:
- Performance data analyzed from $(echo "$performance_data" | wc -w) metrics
- Error patterns identified: $(echo "$error_patterns" | wc -l) types  
- Cost trends analyzed for 7-day period
- Agent effectiveness evaluated

DELIVERABLES:
- System analysis: $analysis_file
- Improvement suggestions: $suggestions_file  
- Evolution roadmap: $roadmap_file

NEXT STEPS:
1. Review Claude's analysis and suggestions
2. Use system-cli.sh to approve/reject improvements
3. Monitor implementation impact
4. Schedule next evolution cycle

Claude has analyzed itself and provided recommendations for self-improvement.
Human oversight required for implementation approval.
EOF

echo "Human notification created: $notification_file" >&2
echo "Review evolution analysis and approve improvements via CLI" >&2

log_warning "evolution_complete" "success" "HYPERBOLIC-TRAINING COMPLETE"

cat << EOF
{
  "evolution_id": "$evolution_id",
  "status": "completed", 
  "duration_seconds": $duration,
  "analysis_file": "$analysis_file",
  "suggestions_file": "$suggestions_file",
  "roadmap_file": "$roadmap_file",
  "notification_file": "$notification_file"
}
EOF

exit 0
